<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idleR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
depth = 100;
grav = 2; //2
hsp = 0;
vsp = 0;
grounded = 1;
jumpspeed = 31;
movespeed = 12;
terminal_velocity = 20;
right = true;
attacking = false;
// Animation speed
animation_speed = 0.35;
animation_idle_speed = 0.02;

image_speed=animation_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cool gaem

// Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(ord('W'));
if(keyboard_check(vk_tab)) game_restart();
/*show_debug_message(string(vsp));
show_debug_message(string(hsp));*/

// Attack

/*
if(keyboard_check(vk_space)){
    sprite_index = spr_attackR;
}
*/





// React to inputs
move = key_left + key_right;
hsp = move * movespeed;


if (vsp &lt; terminal_velocity) vsp += grav;

if(keyboard_check(vk_right)){
 right = true;
 }
if(keyboard_check(vk_left)){
 right = false;
}

if (place_meeting(x, y+1, obj_ground))
{
    vsp = key_jump * -jumpspeed;
}

// Horizontal collision
if(place_meeting(x+hsp, y, obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x+=sign(hsp);
    }
        hsp = 0;
}

// Horizontal collision
if(place_meeting(x+hsp, y, obj_wall2))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall2))
    {
        x+=sign(hsp);
    }
        hsp = 0;
}

// Vertical collision
if(place_meeting(x, y+vsp, obj_ground))
{
    while(!place_meeting(x, y+sign(vsp), obj_ground))
    {
        y += sign(vsp);
    }
    vsp = 0;
}    
// Vertical collision
if(place_meeting(x, y+vsp, obj_ground1))
{
    while(!place_meeting(x, y+sign(vsp), obj_ground1))
    {
        y += sign(vsp);
    }
    vsp = 0;
}  
    
if(place_meeting(x, y+3, obj_ground))
{
    grounded = 1;
}
else{
    grounded = 0;
    }
    
    

/////////////// ANIMATIING AND ATTACKING    
    
if (keyboard_check_pressed(ord('D')))
   {
   attacking=true; //when the player presses the A key, the game knows the character is supposed to be attacking
   if(right)
   {
    instance_create(x+25,y-20,obj_sword);
   }
   else
   {
    instance_create(x-25,y-20,obj_sword);
    with(obj_sword) image_xscale=-1;
   }
   }

if (attacking==true)
   {
/*   if(right){
        sprite_index=spr_attackR;
            }
   else{
        sprite_index=spr_attackL;
   }*/
      if (grounded){

    if(hsp==0)
    {
        if(right){
            sprite_index = spr_attackR;
        }
        if(!right){
            sprite_index = spr_attackL;
        }
    }
    else
    {
        if(hsp&gt;0){
            if(sprite_index != spr_runAttackR) image_index = 0;
            sprite_index = spr_runAttackR;
        }
        else if(hsp&lt;0){
            if(sprite_index != spr_runAttackL) image_index = 0;
            sprite_index = spr_runAttackL;
        }
    }
}
else{

    if(vsp&lt;0)
    {
        if(right){
            sprite_index = spr_jumpAttackR;
        }
        if(!right){
            sprite_index = spr_jumpAttackL;
        }
    }
    // following else is not really needed
    // because there's no falling attack animation
    else{
        if(right){
            sprite_index = spr_jumpAttackR;
        }
        if(!right){
            sprite_index = spr_jumpAttackL;
        }
        }
}
   }
//////////////////////////// ATTACK End
else
   {
   //all the other sprites here, running, standing, etc
   //image_speed = animation_speed;
   if (grounded){

    if(hsp==0)
    {
        if(right){
            //image_speed = animation_idle_speed;
            sprite_index = spr_idleR;
        }
        if(!right){
            //image_speed = animation_idle_speed;
            sprite_index = spr_idleL;
        }
    }
    else
    {
        if(hsp&gt;0){
            if(sprite_index != spr_runR) image_index = 0;
            sprite_index = spr_runR;
        }
        else if(hsp&lt;0){
            if(sprite_index != spr_runL) image_index = 0;
            sprite_index = spr_runL;
        }
    }
}
else{

    if(vsp&lt;=0)
    {
        if(right){
            image_index = 0;
            sprite_index = spr_jumpR;
        }
        if(!right){
            image_index = 0;
            sprite_index = spr_jumpL;
        }
    }
    else{
        if(right){
            sprite_index = spr_jumpR;
            image_index = 3;
        }
        if(!right){
            sprite_index = spr_jumpL;
            image_index = 3;
        }
        }
}
   
   
   
   
   
   }
   


x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack animmation end
if sprite_index=spr_attackR || sprite_index=spr_attackL || sprite_index=spr_runAttackR || sprite_index=spr_runAttackL || sprite_index=spr_jumpAttackR || sprite_index=spr_jumpAttackL{
if attacking=true
   {
   attacking=false//when the animation ends, the variable attacking is set to false
   with(obj_sword) instance_destroy();
   }
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>18,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
